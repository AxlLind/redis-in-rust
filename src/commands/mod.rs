use std::collections::HashMap;
use std::sync::LazyLock;

use crate::{Command, Database, Response, ByteString, Value};

fn int_from_bytes(bytes: &[u8]) -> anyhow::Result<i64> {
    std::str::from_utf8(bytes)
        .map_err(|_| anyhow::anyhow!("tried to parse number, got non-utf8 value"))?
        .parse::<i64>()
        .map_err(|_| anyhow::anyhow!("tried to parse number, got non-numeric value"))
}

pub fn incr_by(db: &mut Database, key: ByteString, step: i64) -> anyhow::Result<Response> {
    let val = step + match db.get_str(&key)? {
        Some(v) => int_from_bytes(v)?,
        None => 0,
    };
    db.set(key, Value::String(val.to_string().into_bytes()));
    Ok(Response::Number(val))
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct CommandInfo {
    pub name: &'static [u8],
    pub arity: i64,
    pub flags: &'static [&'static [u8]],
    pub first_key: i64,
    pub last_key: i64,
    pub step: i64,
}

type CommandFn = fn(&mut Database, Command) -> anyhow::Result<Response>;

macro_rules! register_commands {
    ($($command:ident,)+) => {
        $(mod $command;)+

        pub static COMMAND_LIST: &[(CommandFn, &CommandInfo)] = &[$(($command::run, &$command::INFO)),+];

        pub static COMMANDS: LazyLock<HashMap<&[u8], CommandFn>> = LazyLock::new(|| {
            let mut commands = HashMap::new();
            $(commands.insert($command::INFO.name, $command::run as _);)+
            commands
        });
    };
}
register_commands! {
    acl,
    append,
    asking,
    auth,
    bgrewriteaof,
    bgsave,
    bitcount,
    bitfield_ro,
    bitfield,
    bitop,
    bitpos,
    blmove,
    blmpop,
    blpop,
    brpop,
    brpoplpush,
    bzmpop,
    bzpopmax,
    bzpopmin,
    client,
    cluster,
    command,
    config,
    copy,
    dbsize,
    debug,
    decr,
    decrby,
    del,
    discard,
    dump,
    echo,
    eval_ro,
    eval,
    evalsha_ro,
    evalsha,
    exec,
    exists,
    expire,
    expireat,
    expiretime,
    failover,
    fcall_ro,
    fcall,
    flushall,
    flushdb,
    function,
    geoadd,
    geodist,
    geohash,
    geopos,
    georadius_ro,
    georadius,
    georadiusbymember_ro,
    georadiusbymember,
    geosearch,
    geosearchstore,
    get,
    getbit,
    getdel,
    getex,
    getrange,
    getset,
    hdel,
    hello,
    hexists,
    hget,
    hgetall,
    hincrby,
    hincrbyfloat,
    hkeys,
    hlen,
    hmget,
    hmset,
    hrandfield,
    hscan,
    hset,
    hsetnx,
    hstrlen,
    hvals,
    incr,
    incrby,
    incrbyfloat,
    info,
    keys,
    lastsave,
    latency,
    lcs,
    lindex,
    linsert,
    llen,
    lmove,
    lmpop,
    lolwut,
    lpop,
    lpos,
    lpush,
    lpushx,
    lrange,
    lrem,
    lset,
    ltrim,
    memory,
    mget,
    migrate,
    module,
    monitor,
    r#move,
    mset,
    msetnx,
    multi,
    object,
    persist,
    pexpire,
    pexpireat,
    pexpiretime,
    pfadd,
    pfcount,
    pfdebug,
    pfmerge,
    pfselftest,
    ping,
    psetex,
    psubscribe,
    psync,
    pttl,
    publish,
    pubsub,
    punsubscribe,
    quit,
    randomkey,
    readonly,
    readwrite,
    rename,
    renamenx,
    replconf,
    replicaof,
    reset,
    restore_asking,
    restore,
    role,
    rpop,
    rpoplpush,
    rpush,
    rpushx,
    sadd,
    save,
    scan,
    scard,
    script,
    sdiff,
    sdiffstore,
    select,
    set,
    setbit,
    setex,
    setnx,
    setrange,
    shutdown,
    sinter,
    sintercard,
    sinterstore,
    sismember,
    slaveof,
    slowlog,
    smembers,
    smismember,
    smove,
    sort_ro,
    sort,
    spop,
    spublish,
    srandmember,
    srem,
    sscan,
    ssubscribe,
    strlen,
    subscribe,
    substr,
    sunion,
    sunionstore,
    sunsubscribe,
    swapdb,
    sync,
    time,
    touch,
    ttl,
    r#type,
    unlink,
    unsubscribe,
    unwatch,
    wait,
    watch,
    xack,
    xadd,
    xautoclaim,
    xclaim,
    xdel,
    xgroup,
    xinfo,
    xlen,
    xpending,
    xrange,
    xread,
    xreadgroup,
    xrevrange,
    xsetid,
    xtrim,
    zadd,
    zcard,
    zcount,
    zdiff,
    zdiffstore,
    zincrby,
    zinter,
    zintercard,
    zinterstore,
    zlexcount,
    zmpop,
    zmscore,
    zpopmax,
    zpopmin,
    zrandmember,
    zrange,
    zrangebylex,
    zrangebyscore,
    zrangestore,
    zrank,
    zrem,
    zremrangebylex,
    zremrangebyrank,
    zremrangebyscore,
    zrevrange,
    zrevrangebylex,
    zrevrangebyscore,
    zrevrank,
    zscan,
    zscore,
    zunion,
    zunionstore,
}
